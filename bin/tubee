#!/usr/bin/env php
<?php

use Framework\Config\Environment;
use Framework\Log\Logger;
use Framework\Log\Writer\Stream;
use Framework\Mysql\Mysql;
use React\EventLoop\Loop;
use React\MySQL\Exception;
use React\MySQL\QueryResult;

if (PHP_SAPI !== 'cli') {
    echo 'bin/tubee must be run as a CLI application';
    exit(1);
}

try {
    require __DIR__ . '/../src/app/bootstrap.php';
} catch (\Exception $e) {
    echo 'Autoload error: ' . $e->getMessage();
    exit(1);
}

try {
    $environment = new Environment();
    $mysql = new Mysql($environment);
    $connection = $mysql->createConnection(Loop::get());
} catch (\Exception $e) {
    echo 'Load Application error: ' . $e;
    exit(1);
}

$youtube = processYoutubeUrl($argv[1]);
$link = $youtube[0][0] ?? null;
$hash = $youtube[0][6] ?? null;

try {
    $staticPath = $environment->getStaticPath();
    logger($environment, 'Start download: ' . $link);
    insertYoutube($connection, $link, $hash);

    $command = "cd ${staticPath}/mp3 && youtube-dl --extract-audio --audio-format mp3 -o '%(title)s.%(ext)s' ${link} | grep Destination ";
    $output = shell_exec($command);
    logger($environment, 'Output ' . $output);

    $lines = preg_split("/\r\n|\n|\r/", $output);
    $name = '';
    foreach ($lines as $line) {
        $re = '/^\[ffmpeg] Destination:/';
        preg_match_all($re, $line, $matches, PREG_SET_ORDER, 0);
        if (count($matches)) {
            $name = substr($line, strlen($matches[0][0]));
            $name = trim($name);
        }
    }

    updateYoutube($connection, $link, $name, 1);
    Loop::run();
    $connection->quit();
    exit(0);
} catch (\Exception $e) {
    updateYoutube($connection, $link, null, 0);
    echo 'Downloading error:' . $e;
    exit(1);
}

/**
 * @throws \Exception
 */
function logger($environment, $message) {
    $logFolder = $environment->getLogPath();
    $stream = new Stream();
    $logger = new Logger();
    $writer = $stream->createWriter($logFolder . '/app_cli.log');
    $logger = $logger->addWriter($writer);
    $logger->write($message);
}

/**
 * @param $str
 * @return mixed
 */
function processYoutubeUrl($str): array
{
    $re = '/^((?:https?:)?\/\/)?((?:www|m)\.)?((?:youtube(-nocookie)?\.com|youtu.be))(\/(?:[\w\-]+\?v=|embed\/|v\/)?)([\w\-]+)(\S+)?$/im';
    preg_match_all($re, $str, $matches, PREG_SET_ORDER, 0);
    return $matches;
}

/**
 * @param $connection
 * @param $link
 * @param $hash
 */
function insertYoutube($connection, $link, $hash)
{
    $query = 'INSERT INTO youtube (hash, name, link, status) VALUES (?,?,?, 0)';
    $connection->query($query, [$hash, null, $link])->then(
        function (QueryResult $command) use ($query) {
            echo 'Successfully ' . $query . PHP_EOL;
        },
        function (Exception $error) use ($query) {
            echo 'Error ' . $query . PHP_EOL;
        }
    );
}

/**
 * @param $connection
 * @param $link
 * @param $name
 * @param $status
 * @return void
 */
function updateYoutube($connection, $link, $name, $status)
{
    $query = 'UPDATE youtube SET status=?, name=? WHERE link=?';
    $connection->query($query, [$status, $name, $link])->then(
        function (QueryResult $command) use ($query) {
//            echo 'Successfully ' . $query . PHP_EOL;
            Loop::stop();
        },
        function (Exception $error) use ($query) {
            echo 'Error ' . $query . PHP_EOL;
            Loop::stop();
        }
    );
}
